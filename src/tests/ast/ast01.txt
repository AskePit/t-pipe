"qwerty" | drop 2
---
FunctionsChain
	FunctionData
		Literal("qwerty")
	FunctionCall
		"drop"
		FunctionArgument
			Expression
				Literal(2)
---
"qwerty" | replace 'y' 'z'
---
FunctionsChain
	FunctionData
		Literal("qwerty")
	FunctionCall
		"replace"
		FunctionArgument
			Expression
				Literal('y')
		FunctionArgument
			Expression
				Literal('z')
---
"qwerty" | map {(x = 'y') ? 'z' : x}
---
FunctionsChain
	FunctionData
		Literal("qwerty")
	FunctionCall
		"map"
		FunctionArgument
			Lambda
				Expression
					TernaryOperator
						Expression
							CompareExpression
								Expression
									XValue
								=
								Expression
									Literal('y')
						Expression
							Literal('z')
						Expression
							XValue
---
"qwerty" | map {'y' ? 'z' : x}
---
FunctionsChain
	FunctionData
		Literal("qwerty")
	FunctionCall
		"map"
		FunctionArgument
			Lambda
				Expression
					TernaryOperator
						Expression
							Literal('y')
						Expression
							Literal('z')
						Expression
							XValue
---
((2 - 1) < 15) and ("foo" != ("42" + '4'))
---
LogicExpression
	Expression
		CompareExpression
			Expression
				ArithmeticExpression
					Expression
						Literal(2)
					-
					Expression
						Literal(1)
			<
			Expression
				Literal(15)
	and
	Expression
		CompareExpression
			Expression
				Literal("foo")
			!=
			Expression
				ArithmeticExpression
					Expression
						Literal("42")
					+
					Expression
						Literal('4')
---
2 - 1 < 15 and "foo" != "42" + '4'
---
LogicExpression
	Expression
		CompareExpression
			Expression
				ArithmeticExpression
					Expression
						Literal(2)
					-
					Expression
						Literal(1)
			<
			Expression
				Literal(15)
	and
	Expression
		CompareExpression
			Expression
				Literal("foo")
			!=
			Expression
				ArithmeticExpression
					Expression
						Literal("42")
					+
					Expression
						Literal('4')
---
2 - 1 < 15 and "foo" != ("42" | filter {'4'}) + '4'
---
LogicExpression
	Expression
		CompareExpression
			Expression
				ArithmeticExpression
					Expression
						Literal(2)
					-
					Expression
						Literal(1)
			<
			Expression
				Literal(15)
	and
	Expression
		CompareExpression
			Expression
				Literal("foo")
			!=
			Expression
				ArithmeticExpression
					Expression
						FunctionsChain
							FunctionData
								Literal("42")
							FunctionCall
								"filter"
								FunctionArgument
									Lambda
										Expression
											Literal('4')
					+
					Expression
						Literal('4')
---
"xxxFnx" | filter {'x'} | len
---
FunctionsChain
	FunctionData
		Literal("xxxFnx")
	FunctionCall
		"filter"
		FunctionArgument
			Lambda
				Expression
					Literal('x')
	FunctionCall
		"len"
---
"xxxFnx" | filter {x = 'x'} | len
---
FunctionsChain
	FunctionData
		Literal("xxxFnx")
	FunctionCall
		"filter"
		FunctionArgument
			Lambda
				Expression
					CompareExpression
						Expression
							XValue
						=
						Expression
							Literal('x')
	FunctionCall
		"len"
---
"15 dogs"
	| split ' '
	| nth_map 0 { x + "th" }
	| nth_map 1 { x | drop -1 }
	| reverse
	| join " the "
---
FunctionsChain
	FunctionData
		Literal("15 dogs")
	FunctionCall
		"split"
		FunctionArgument
			Expression
				Literal(' ')
	FunctionCall
		"nth_map"
		FunctionArgument
			Expression
				Literal(0)
		FunctionArgument
			Lambda
				Expression
					ArithmeticExpression
						Expression
							XValue
						+
						Expression
							Literal("th")
	FunctionCall
		"nth_map"
		FunctionArgument
			Expression
				Literal(1)
		FunctionArgument
			Lambda
				Expression
					FunctionsChain
						FunctionData
							XValue
						FunctionCall
							"drop"
							FunctionArgument
								Expression
									Negation
										Expression
											Literal(1)
	FunctionCall
		"reverse"
	FunctionCall
		"join"
		FunctionArgument
			Expression
				Literal(" the ")
---
"AaaaaaaaBbbbbCccAaaaaaDd"
	| map lower
	| chunk_by eq
	| filter {(x | len) > 3}
	| map {x | get 0}
	| collect
	| len
---
FunctionsChain
	FunctionData
		Literal("AaaaaaaaBbbbbCccAaaaaaDd")
	FunctionCall
		"map"
		FunctionArgument
			Lambda
				"lower"
	FunctionCall
		"chunk_by"
		FunctionArgument
			Lambda
				"eq"
	FunctionCall
		"filter"
		FunctionArgument
			Lambda
				Expression
					CompareExpression
						Expression
							FunctionsChain
								FunctionData
									XValue
								FunctionCall
									"len"
						>
						Expression
							Literal(3)
	FunctionCall
		"map"
		FunctionArgument
			Lambda
				Expression
					FunctionsChain
						FunctionData
							XValue
						FunctionCall
							"get"
							FunctionArgument
								Expression
									Literal(0)
	FunctionCall
		"collect"
	FunctionCall
		"len"
---
"mean" | filter { x != 'e' }
---
FunctionsChain
	FunctionData
		Literal("mean")
	FunctionCall
		"filter"
		FunctionArgument
			Lambda
				Expression
					CompareExpression
						Expression
							XValue
						!=
						Expression
							Literal('e')
---
['a', 'C', '?']
---
Array
	Literal('a')
	Literal('C')
	Literal('?')
---
['a', 'C', '?']|collect|split 'C'|join '/'
---
FunctionsChain
	FunctionData
		Array
			Literal('a')
			Literal('C')
			Literal('?')
	FunctionCall
		"collect"
	FunctionCall
		"split"
		FunctionArgument
			Expression
				Literal('C')
	FunctionCall
		"join"
		FunctionArgument
			Expression
				Literal('/')
---
["foo", "barr", "sigmoid"] | filter { (x | len) > 3 }
---
FunctionsChain
	FunctionData
		Array
			Literal("foo")
			Literal("barr")
			Literal("sigmoid")
	FunctionCall
		"filter"
		FunctionArgument
			Lambda
				Expression
					CompareExpression
						Expression
							FunctionsChain
								FunctionData
									XValue
								FunctionCall
									"len"
						>
						Expression
							Literal(3)
---
["foo", "barr", "sigmoid"] | filter { len > 3 }
---
FunctionsChain
	FunctionData
		Array
			Literal("foo")
			Literal("barr")
			Literal("sigmoid")
	FunctionCall
		"filter"
		FunctionArgument
			Lambda
				Expression
					CompareExpression
						Expression
							Id("len")
						>
						Expression
							Literal(3)
